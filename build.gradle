plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.diffplug.spotless' version '6.22.0'
    id 'org.openapi.generator' version '7.0.0'
    id 'io.freefair.lombok' version '8.4'
}

group = 'com.codefest'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

tasks.named('test') {
    useJUnitPlatform()
}

compileJava {
    dependsOn tasks.openApiGenerate
}

sourceSets {
    main {
        java {
            srcDir "${layout.buildDirectory.get().asFile}/generated/src/main/java"
        }
    }
}
def apiSpec = "$rootDir/src/main/resources/EJCRaft.yaml".toString()

openApiGenerate {
    generatorName = "spring"
    inputSpec = apiSpec
    outputDir = "${layout.buildDirectory.get().asFile}/generated".toString()
    groupId = "$project.group"
    id = "$project.name-java-client"
    version = "$project.version"
    apiPackage = "com.codefest.ejcraft.api"
    modelPackage = "com.codefest.ejcraft.api.model"
    enablePostProcessFile = true
    skipOverwrite = false
    configOptions = [
            library : "spring-boot",
            useBeanValidation : "true",
            interfaceOnly: "true",
            openApiNullable: "false",
            implicitHeaders: "true",
            useSpringBoot3: "true",
            useJakartaEe: "true",
            useTags: "true",
            delegatePattern: "true"
    ]
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        target 'src/*/java/**/*.java'

        removeUnusedImports()
        googleJavaFormat()
        formatAnnotations()
    }
}
